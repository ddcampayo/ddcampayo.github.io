<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>CFD</title>

		<meta name="description" content="CFD">
		<meta name="author" content="Daniel Duque">

		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<link rel="stylesheet" href="../css/reveal.css">
		<link rel="stylesheet" href="../css/theme/black.css" id="theme">

		<!-- Theme used for syntax highlighting of code -->
		<link rel="stylesheet" href="../lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? '../css/print/pdf.css' : '../css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
			  <section>
			    
			    <h2>Simulación de fluidos con código abierto</h2>
			    <h2>Simulación de un casco</h2>

			    
			    <p>
			      <small>Por <a href="http://ddcampayo.github.io">Daniel Duque</a>
			      </small>
			    </p>
			  </section>
			  
			  <section data-markdown>
			    <script type="text/template">
			      #### Casco Wigley

			      ``$$ y= \pm \frac B2
			      \left[
			      1 - \left( \frac{2x}{L} \right)^2
			      \right]
			      \left[
			      1 - \left( \frac{2z}{T} \right)^2
			      \right]
			      $$``
			      ![Casco Wigley](wigley1.png)
			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Mallado con "snappy"

			      El mallador automático principal de OpenFOAM
			      se llama [snappyHexMesh](https://cfd.direct/openfoam/user-guide/snappyhexmesh)

			      * snappy, por el paso de "fijado"

			      * hex, por hexahedros (sólo contiene estos, y hex partidos)

			      * mesh, por malla
			      
			      
			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Mallado en 2D

			      Por desgracia, y como todo OpenFOAM, snappyHexMesh malla en volumen
			      nada más. Hoy contamos como engañarlo para que malle en 2D.

			      El caso más interesante está en [wingMotion](/home/OpenFOAM/OpenFOAM/OpenFOAM-4.1/run/tutorials/incompressible/pimpleDyMFoam/wingMotion).
			      
			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  wingMotion

			      Este es un caso bastante complicado. El fichero [Allrun](/home/OpenFOAM/OpenFOAM/OpenFOAM-4.1/run/tutorials/incompressible/pimpleDyMFoam/wingMotion) explica bastante bien lo que hace:
			      
			      * Mallado previo con snappy de un perfil de ala

			      * Pasado a 2D para correr un estacionario previo

			      * Ejecución de un transitorio muy
			      ambicioso, con posible movimiento del
			      ala (y la propia malla...)

			      
			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  wingMotion, paso a paso

			      Realmente, sólo nos interesan los primeros pasos. Veamos qué hace
			      snappyHexMesh

			      ```sh
			      cd wingMotion_snappyHexMesh/
			      blockMesh
			      paraFoam &
			      snappyHexMesh
			      paraFoam &
			      ```

			      Atención a los "tiempos" 1, 2 y 3, las sucesivas etapas del mallado
			      
			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  Etapas del mallado


			      1. Mallado "castellado" (¿"almenado"?)

			      2. Snap ("¿pegado?")

			      3. Capas
			      
			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  Paso a 2D

			      ```sh
			      cd ../wingMotion2D_simpleFoam
			      extrudeMesh  # (ojo a la salida)
			      createPatch
			      ```

			      Los patches inicialmente son: inlet,
			      outlet, topAndBottom, wing,
			      symBack, symFront

			      Después de createPatch son: inlet,
			      outlet,  topAndBottom, wing,
			      back, front


			      
			      
			    </script>
			  </section>

			  
			  <section data-markdown>
			    <script type="text/template">
			      ####  Reutilización para nuestro cilindro

			      Lo primero, crear un caso limpio
			      ("cilindro_snappy") con system, constant
			      y 0 (p.e. de cavity)

			      Luego, crear un blockMesh sencillo (o
			      copiar el del ala). Por ejemplo,
			      [cilindro_snappy/system/blockMeshDict](este
			      dict)

			      Después, "tunear" hexnappyHexMeshDict !

			      
			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  Reutilización de snappyHexMeshDict

			      * Copiar snappyHexMeshDict del ala a nuestro system

			      * Correr blockMesh (si no se ha hecho ya)

 			      * Correr snappyHexMesh: obviamente, falta el obj del ala

			      * Editar snappyHexMeshDict, poner false en "snap" y "addLayers" de
			      momento

			      
			    </script>
			  </section>

			      


			  <section data-markdown>
			    <script type="text/template">
			      ####  Cilindro snappyHexMeshDict

			      Para una forma tan sencilla como un cilindro, no necesitamos
			      una superficie

			      * Cambiar la sección geometry a:

			      ```c++
geometry
{
    cilindro
    {
        type    searchableCylinder;
        point1     (0   0  -1);
        point2     (0   0   1);
	radius 0.5;
    }

    
    refinementBox
    {
        type    searchableBox;
        min     (0   -0.2  -1);
        max     (10   0.2 1);
    }
};```
			      
			      
			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Cilindro snappyHexMeshDict
			      
			      * Buscar "wing", poner "cilindro"

			      * ojo con locationInMesh! Poner p.e. locationInMesh ( 3.31313 0 0.05);

			      * correr snappyHexMesh a ver ...

			      * poner todo a "true", contemplar el resultado
			      
			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Paso al 2D
			      
 			      * Copiar wingMotion2D_simpleFoam/system/ a nuestro system/extrudeMeshDict

			      * Poner este mismo directorio: sourceCase "./";

			      * Colocar en "constant" el último directorio "polyMesh", borrar (o
			      mover a algún lado) los directorios "temporales" que no sean 0.

			      * Correr extrudeMesh, admirar su bidimensionalidad con paraFoam.

			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  Ejecución

			      Ahora, es como siempre:
			      
 			      * Comprobar los ficheros p y U en 0/

			      * Mirar la viscosidad en constant/transportProperties

			      * Ajustar tiempos en system/controlDict
			      
			    </script>
			  </section>

			  
			      

			  
			  


			  
			  

 			  <section data-markdown data-separator="^\n---\n$" data-separator-vertical="----">
			    <script type="text/template">
			      ####  Velocidad y presión: flujo debido a velocidades

			      Especificamos la velocidad de
			      entrada. Entonces:
			      
			      0/p:
			      ```c++
			      entrada
			      {
			      type zeroGradient;
			      }
			      salida
			      {
			      type fixedValue;
    			      value uniform 0;
			      }
			      ```
			      ----
			      ####  Velocidad y presión: flujo debido a velocidades
			      0/U:
			      ```c++

			      entrada
			      {
			      type fixedValue;
			      value uniform (1 0 0);
			      }

			      salida
			      {
			      type  zeroGradient;
			      }
			      ```

			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Número de Courant

			      Echar un ojo a la malla con para Foam!
			      
			      ``$\Delta x = 0.05$``

			      ``$u_0 = 1$``
			      
			      ``Co$=\frac12$``
			      
			      ``Co=$ \frac{u_0 \Delta t }{\Delta x} \quad\to\quad
			      \Delta t= \frac{\mathrm{Co}\Delta x}{u_0} = 0.025 $ ``

			      
			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  Número de Reynolds

                              ![Esquema de convección en 1D](./Flow_cylinder.jpg)


			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Número de Reynolds

			      
			      ``$$ \mathrm{Re} := \frac{L u_0}{\nu}  $$``

			      Con $L=1$, $u_0=1$ $ \quad \to \quad \mathrm{Re} 1/\nu$.

			      Probemos con Re=$50$, $\nu=0.02$
			      
			    </script>
			  </section>


			  <section data-markdown>
			    <script type="text/template">
			      ####  Influencia de la salida y la simetría

			      
			      ``$$ \mathrm{Re} := \frac{L u_0}{\nu}  $$``

			      Con $L=1$, $u_0=1$ $ \quad \to \quad \mathrm{Re} 1/\nu$.

			      Probemos con Re=$200$, $\nu=0.005$, y aumentemos el canal por la salida

			      ```xml
			      points[2]  = point(8, 0, -0.5);
			      
			      points[3]  = point(8, 0.707107, -0.5);
			      ```
			      

			      ```xml
			      hex (1 2 3 4 20 21 22 23) (80 10 1) simpleGrading (1 1 1)
			      
			      hex (4 3 6 7 23 22 25 26) (80 20 1) simpleGrading (1 1 1)
			      ```

			      

			      
			      
			    </script>
			  </section>




			  <section data-markdown data-separator="^\n---\n$" data-separator-vertical="----">
			    <script type="text/template">
			      ####  Recirculación a la salida

			      0/U:
			      ```c++
			      salida
			      {
			         type       inletOutlet;
			         inletValue uniform (0 0 0);
			         value      uniform (1 0 0);
			      }```

			    </script>
			  </section>
			  

			  
			  <section data-markdown>
			    <script type="text/template">
			      ####  Cilindro completo

			      Comenzar con [este blockMeshDict](cylinder2/system/blockMeshDict)
			      
			      Probemos con Re=$200$, $\nu=0.005$, y aumentemos el canal por la salida

			      <!-- [Directorio Poiseuille](poise) -->
			      			      
			    </script>
			  </section>

			  <section data-markdown>
			    <script type="text/template">
			      ####  Fuerzas sobre un cilindro
			      
			      Probar [este controlDict](cylinder2/system/controlDict)

			      Dibujar [python nb](./dibuja_fuerzas.ipynb)

			      			      
			    </script>
			  </section>

			  


			  
			  <section data-markdown>
			    <script type="text/template">
			      ## Referencias


			      [12 Steps to Navier-Stokes](http://lorenabarba.com/blog/cfd-python-12-steps-to-navier-stokes/)
			    </script>
			  </section>


			</div>

		</div>

		<script src="../lib/js/head.min.js"></script>
		<script src="../js/reveal.js"></script>

		<script>

			// More info https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				transition: 'slide', // none/fade/slide/convex/concave/zoom


    // other options ...

			math: {
			mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js',
			config: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html
			},

			
				// More info https://github.com/hakimel/reveal.js#dependencies
				dependencies: [
					{ src: '../lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: '../plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: '../plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: '../plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: '../plugin/zoom-js/zoom.js', async: true },
					{ src: '../plugin/notes/notes.js', async: true },
//			{ src: 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML', async: true }
			{ src: '../plugin/math/math.js', async: true }
			]

			});

		</script>

	</body>
</html>
